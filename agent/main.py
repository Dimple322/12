# agent/main.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
–°–ª–µ–¥–∏—Ç –∑–∞ –ø–∞–ø–∫–æ–π data/incoming, –ø–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª—ã, —Å—Ç—Ä–æ–∏—Ç –ë–î, –º–æ–¥–µ–ª–∏, –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å,
–∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã–º–∏ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
"""
import time
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

# ---------- –∏–º–ø–æ—Ä—Ç—ã –∞–≥–µ–Ω—Ç–æ–≤ ----------
from agent.llm.ollama_client import AnalystLLM
from agent.parser.universal_parser import extract_text
# from agent.db.schema_builder import build_db, get_engine, DB_PATH # <-- –£–±–∏—Ä–∞–µ–º DB_PATH –æ—Ç—Å—é–¥–∞
from agent.db.schema_builder import build_db # <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é
from agent.codegen.sqlalchemy_gen import generate_model_py
from agent.db.loader import load_excel_to_db
from agent.vector.indexer import index_documents


# ---------- –ø—É—Ç–∏ ----------
ROOT      = Path(__file__).resolve().parent.parent
INBOX     = ROOT / "data" / "incoming"
PROCESSED = ROOT / "data" / "processed"
GENERATED = ROOT / "generated"
# --- –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º DB_PATH –∑–¥–µ—Å—å ---
DB_PATH   = GENERATED / "digital_twin.db"
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û ---

llm = AnalystLLM()


class NewFileHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞."""

    def on_created(self, event):
        if event.is_directory:
            return
        self.handle_file(Path(event.src_path))

    # --------- –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω ---------
    def handle_file(self, file: Path):
        if file.suffix.lower() not in {".txt", ".md", ".pdf", ".xlsx", ".xls", ".pptx"}:
            return
        if not file.exists():
            print(f"[SKIP] File already processed: {file.name}")
            return

        print(f"üì•  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {file.name}")
        try:
            # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            text = extract_text(file)

            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-—Å—Ö–µ–º—ã
            schema = llm.generate_schema(text)
            if not schema.get("sql") or "CREATE TABLE" not in schema["sql"].upper():
                print(f"‚ùå  –û—à–∏–±–∫–∞: LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SQL CREATE TABLE –¥–ª—è {file.name}")
                return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞

            try:
                engine = build_db(schema["sql"], DB_PATH)
                if engine is None:  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, build_db –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    raise ValueError("build_db –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            except Exception as e:
                print(f"‚ùå  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è {file.name}: {e}")
                return

            # 3. –°–æ–∑–¥–∞–Ω–∏–µ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º DB_PATH –≤ build_db ---
            engine = build_db(schema["sql"], DB_PATH) # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

            # 4. –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ SQL
            import re
            # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–π—Ç–∏ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã ---
            # –ò—â–µ–º CREATE TABLE [IF NOT EXISTS] –∏–º—è_—Ç–∞–±–ª–∏—Ü—ã
            table_match = re.search(r'CREATE\s+TABLE\s+(?:IF\s+NOT\s+EXISTS\s+)?(\w+)', schema["sql"], re.I)
            table_name = table_match.group(1) if table_match else "tbl"
            # --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø ---

            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQLAlchemy-–º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            # model_code = generate_model_py(table_name)
            # models_file = GENERATED / f"{file.stem}_models.py"
            # models_file.write_text(model_code, encoding="utf-8")

            # 6. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è Excel)
            if file.suffix.lower() in {".xlsx", ".xls"}:
                print(f"[DEBUG] –ó–∞–ª–∏–≤–∞–µ–º Excel –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
                # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º DB_PATH –≤ load_excel_to_db ---
                load_excel_to_db(file, table_name, DB_PATH) # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
                # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---

            # 7. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–∑ –ë–î)
            self._build_vector_index(engine, table_name, file)

            # 8. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            dest = PROCESSED / file.name
            file.rename(dest)
            print("‚úÖ  –ì–æ—Ç–æ–≤–æ:", file.stem)

        except Exception as e:
            print(f"‚ùå  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file.name}: {e}")
            # import traceback
            # traceback.print_exc() # –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏

    # --------- –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å ---------
    def _build_vector_index(self, engine, table_name: str, file: Path): # <-- –¢–∏–ø table_name –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
        try:
            import pandas as pd
            # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º DB_PATH –≤ index_documents ---
            # index_documents(texts, metas) –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ index_documents —É–∂–µ –∑–Ω–∞–µ—Ç –ø—É—Ç—å –∫ –ë–î
            # –ù–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å engine –∏ table_name –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            rows = pd.read_sql(f"SELECT * FROM {table_name} LIMIT 1000", con=engine)
            if rows.empty:
                return
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç. –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º.
            texts = rows.apply(lambda r: " ".join(r.astype(str)), axis=1).tolist()
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–∞)
            metas = [{"source": file.name, "table": table_name} for _ in texts] # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ table_name
            index_documents(texts, metas)
        except Exception as e:
            print(f"[WARN] –ò–Ω–¥–µ–∫—Å –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {e}")


# ---------------- –∑–∞–ø—É—Å–∫ ----------------
def start_watch():
    PROCESSED.mkdir(exist_ok=True)
    GENERATED.mkdir(exist_ok=True)

    handler = NewFileHandler()
    observer = Observer()
    observer.schedule(handler, str(INBOX), recursive=False)
    observer.start()
    print(f"üëÄ  –ù–∞–±–ª—é–¥–∞—é –∑–∞ {INBOX} ...  (Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
    observer.join()


if __name__ == "__main__":
    start_watch()
