# agent/ui/training_interface.py (–∏—Å–ø—Ä–∞–≤–ª—ë–Ω undefined 'logic' –∏ —É–ª—É—á—à–µ–Ω UX)
import sys
import streamlit as st
import json
import os
import re
from pathlib import Path
import pandas as pd
from sqlalchemy import create_engine, inspect, text
from agent.utils.logger import get_logger

st.sidebar.header("DEBUG")
if "agent" in st.session_state:
    try:
        st.sidebar.write("Agent class:", type(st.session_state.agent).__name__)
        st.sidebar.write("History length:", len(st.session_state.agent.history))
        if st.session_state.agent.history:
            last = st.session_state.agent.history[-1]
            st.sidebar.write("Last message role:", last.role)
            st.sidebar.json(last.metadata or {})
    except Exception as e:
        st.sidebar.write("Debug read error:", e)

logger = get_logger(__name__)

current_file_path = Path(__file__).resolve().parent
project_root = current_file_path.parent.parent
if str(project_root) not in sys.path:
    sys.path.insert(0, str(project_root))

from agent.utils.knowledge_base import load_knowledge_base, save_knowledge_base_entry

DB_PATH = project_root / "generated" / "digital_twin.db"
KB_PATH = project_root / "generated" / "knowledge_base.json"
(project_root / "generated").mkdir(exist_ok=True)

try:
    from agent.thinking_agent import ThinkingAgent
    THINKING_AGENT_AVAILABLE = True
except ImportError as e:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å agent.thinking_agent: {e}")
    THINKING_AGENT_AVAILABLE = False
    class ThinkingAgent:
        def __init__(self, *args, **kwargs):
            pass
        def think(self, question: str):
            return {"type": "final_answer", "content": f"–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question}", "details": {}}

def get_db_schema():
    if not DB_PATH.exists():
        st.warning("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    try:
        engine = create_engine(f"sqlite:///{DB_PATH}", future=True)
        inspector = inspect(engine)
        tables = {}
        for table_name in inspector.get_table_names():
            if table_name != "docs":
                columns = [col['name'] for col in inspector.get_columns(table_name)]
                tables[table_name] = columns
        return tables
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return {}

def safe_dataframe_display(df: pd.DataFrame, use_container_width: bool = True, height: int | str | None = None):
    if df.empty:
        st.info("DataFrame –ø—É—Å—Ç.")
        return
    df_safe = df.copy()
    for col in df_safe.columns:
        df_safe[col] = df_safe[col].infer_objects(copy=False).fillna("").astype(str)
    effective_height: int | str = height if height is not None else ('stretch' if use_container_width else 400)
    st.dataframe(df_safe, use_container_width=use_container_width, height=effective_height)

try:
    from agent.cli.query import ask_ru
    QUERY_MODULE_AVAILABLE = True
except ImportError as e:
    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å agent.cli.query: {e}")
    st.info("–ú–æ–¥—É–ª—å –∞–≥–µ–Ω—Ç-CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.")
    QUERY_MODULE_AVAILABLE = False


    def ask_ru(question: str):
        """Fallback: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —è–≤–Ω—É—é –æ—à–∏–±–∫—É (–Ω–µ –∏–º–∏—Ç–∞—Ü–∏—é)."""
        return {
            "type": "error",
            "content": f"–ú–æ–¥—É–ª—å agent.cli.query –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
        }

st.set_page_config(page_title="–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ - –û–±—É—á–µ–Ω–∏–µ", page_icon="üß†", layout="wide")
st.title("üß† –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –û–±—É—á–µ–Ω–∏—è")

if "thinking_agent" not in st.session_state:
    st.session_state.thinking_agent = ThinkingAgent(DB_PATH, KB_PATH)
agent = st.session_state.thinking_agent

tab1, tab2, tab3 = st.tabs(["–û–±–∑–æ—Ä –ë–î", "–ó–∞–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É", "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"])

with tab1:
    st.header("–û–±–∑–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    schema = get_db_schema()
    if not schema:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.")
    else:
        table_names = list(schema.keys())
        selected_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É:", table_names, key="schema_table_overview")
        if selected_table:
            st.subheader(f"–°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã: `{selected_table}`")
            cols_df = pd.DataFrame(schema[selected_table], columns=["–°—Ç–æ–ª–±–µ—Ü"])
            safe_dataframe_display(cols_df, use_container_width=True, height=200)
            if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö", key=f"show_sample_{selected_table}_overview"):
                try:
                    engine = create_engine(f"sqlite:///{DB_PATH}", future=True)
                    with engine.connect() as conn:
                        total_rows_result = conn.execute(text(f'SELECT COUNT(*) FROM "{selected_table}"'))
                        total_rows = total_rows_result.scalar()
                        st.write(f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ:** {total_rows}")
                        if total_rows:
                            sample_result = conn.execute(text(f'SELECT * FROM "{selected_table}" LIMIT :limit'), {"limit": 10})
                            sample_rows = sample_result.fetchall()
                            sample_col_names = list(sample_result.keys()) if sample_rows else []
                            if sample_rows:
                                sample_df = pd.DataFrame(sample_rows, columns=sample_col_names)
                                st.write(f"**–ü–µ—Ä–≤—ã–µ {min(10, total_rows)} —Å—Ç—Ä–æ–∫:**")
                                safe_dataframe_display(sample_df, use_container_width=True, height=400)
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")

with tab2:
    st.header("–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≥–µ–Ω—Ç–æ–º –∏ –æ–±—É—á–µ–Ω–∏–µ")
    schema = get_db_schema()
    if not schema:
        st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.")
        st.stop()
    table_names = list(schema.keys())
    context_table = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞:", table_names, key="context_table_query")
    user_question = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫ –∞–≥–µ–Ω—Ç—É:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –µ—Å—Ç—å –ø–æ–¥–æ–±—ä–µ–∫—Ç—ã?")
    if st.button("üß† –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É") and user_question:
        st.subheader("üß† –†–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞")
        st.write(f"**–í–æ–ø—Ä–æ—Å:** {user_question}")
        try:
            agent_response = ask_ru(user_question) if QUERY_MODULE_AVAILABLE else {"type":"final_answer","content":"–ò–º–∏—Ç–∞—Ü–∏—è"}
            if agent_response["type"] == "final_answer":
                st.session_state.agent_needs_clarification = False
                st.session_state.clarification_request = ""
                st.write(f"**üß† –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞:**")
                st.write(agent_response["content"])
                result_data = agent_response.get("result", [])
                if result_data:
                    result_df = pd.DataFrame(result_data)
                    st.write(f"**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(result_df)}):**")
                    safe_dataframe_display(result_df, use_container_width=True, height=400)
                generated_json = agent_response.get("json_query", {})
                if generated_json:
                    st.write("**üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON-–∑–∞–ø—Ä–æ—Å:**")
                    st.json(generated_json)
                generated_sql = agent_response.get("sql_query", "")
                if generated_sql:
                    st.write("**üîç –ü–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å:**")
                    st.code(generated_sql, language="sql")
            elif agent_response["type"] == "error":
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç –∞–≥–µ–Ω—Ç–∞: {agent_response['content']}")
            elif agent_response["type"] == "clarify":
                st.warning(agent_response.get("content"))
                mappings = agent_response.get("mappings", {})
                if mappings.get("unknowns"):
                    with st.expander("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ"):
                        for unk in mappings["unknowns"]:
                            st.write(f"- {unk}")
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞–≥–µ–Ω—Ç—É: {e}")

    st.subheader("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä (–¥–ª—è –æ–±—É—á–µ–Ω–∏—è)")
    initial_json_str = "{}"
    if 'agent_response' in locals() and isinstance(agent_response, dict) and agent_response.get("json_query"):
        try:
            initial_json_str = json.dumps(agent_response["json_query"], ensure_ascii=False, indent=2)
        except Exception:
            initial_json_str = "{}"
    else:
        initial_json_structure = {"select": ["*"], "from": context_table if 'context_table' in locals() else "table_name", "where": []}
        initial_json_str = json.dumps(initial_json_structure, ensure_ascii=False, indent=2)

    edited_json_str = st.text_area("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ JSON, –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –æ—à–∏–±—Å—è:", value=initial_json_str, height=250, key="edit_json_query")
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–º–µ—Ä"):
        try:
            json.loads(edited_json_str)
            save_knowledge_base_entry(user_question, edited_json_str)
        except json.JSONDecodeError:
            st.error("–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")

    new_logic_str = st.text_area("–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–∫—É? (JSON)", value=json.dumps({}, ensure_ascii=False, indent=2), height=200, key="edit_logic")
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É"):
        try:
            logic_new = json.loads(new_logic_str)
            ts = pd.Timestamp.utcnow().strftime("%Y%m%dT%H%M%SZ")
            out_path = project_root / "generated" / f"saved_logic_{ts}.json"
            out_path.parent.mkdir(parents=True, exist_ok=True)
            out_path.write_text(json.dumps(logic_new, ensure_ascii=False, indent=2), encoding='utf-8')
            st.success(f"–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {out_path.relative_to(project_root)}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

with tab3:
    st.header("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∞–≥–µ–Ω—Ç–∞")
    kb = load_knowledge_base()
    if not kb:
        st.info("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞.")
    else:
        st.write(f"–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(kb)}")
        num_to_show = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", min_value=1, max_value=len(kb), value=min(10, len(kb)), step=1)
        for i, entry in enumerate(list(reversed(kb))[:num_to_show]):
            with st.expander(f"**–í–æ–ø—Ä–æ—Å {len(kb) - i}:** {entry['question']}", expanded=False):
                st.write(f"**–í–æ–ø—Ä–æ—Å:** {entry['question']}")
                st.write(f"**JSON-–∑–∞–ø—Ä–æ—Å:**")
                st.json(entry['json_query'])
                st.write(f"**–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ:** {entry.get('timestamp', 'N/A')} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {entry.get('user', 'N/A')}")