#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å ChromaDB.
–ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏.
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path
import argparse
import logging
import chardet, io
from gpu_embed_global import GpuMiniLMEmbedding  # GPU-—ç–º–±–µ–¥–¥–∏–Ω–≥

_product_test_suite = None

def _get_product_test_suite():
    global _product_test_suite
    if _product_test_suite is None:
        from test_system_chroma import ProductTestSuite
        _product_test_suite = ProductTestSuite
    return _product_test_suite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)



def check_chroma_installation():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É ChromaDB"""
    try:
        import chromadb
        print("‚úÖ ChromaDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except ImportError:
        print("‚ùå ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False


def install_chroma():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ChromaDB"""
    print("üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromaDB...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "chromadb"], check=True)
        print("‚úÖ ChromaDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ChromaDB: {e}")
        return False


def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞"""

    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–î–£–ö–¢–ê")
    print("=" * 40)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromaDB
    if not check_chroma_installation():
        if not install_chroma():
            return False

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        "generated",
        "data/incoming",
        "data/processed",
        "logs",
        "exports",
        "user_data"
    ]

    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    required_packages = [
        "pandas",
        "numpy",
        "ollama",
        "scikit-learn",
        "plotly",
        "matplotlib",
        "seaborn"
    ]

    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    missing_packages = []

    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")

    if missing_packages:
        print(f"\n‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤:")
        for package in missing_packages:
            try:
                subprocess.run([sys.executable, "-m", "pip", "install", package], check=True)
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {e}")

    print(f"\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!")
    return True


def run_product_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""

    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–î–£–ö–¢–ê")
    print("=" * 30)

    try:
        from test_system_chroma import ProductTestSuite

        tester = ProductTestSuite()
        results = asyncio.run(tester.run_comprehensive_test())

        successful_tests = len([r for r in results if r.get("passed", False)])
        total_tests = len(results)

        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {successful_tests}/{total_tests} ({successful_tests / total_tests * 100:.1f}%)")

        if successful_tests >= total_tests * 0.8:  # 80% –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞
            print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            return True
        else:
            print("‚ùå –ü—Ä–æ–¥—É–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


def show_user_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    print(f"\nüìã –ú–ï–ù–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 25)
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É")
    print("2. –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
    print("4. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    print("5. –í—ã—Ö–æ–¥")

    choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-5): ").strip()
    return choice


from pathlib import Path
import pandas as pd
import chromadb
from chromadb.utils import embedding_functions
import uuid

def load_user_data():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —Å–∞–º–æ–≤—ã–∑—ã–≤–∞ CLI."""
    print(f"\nüìÇ –ó–ê–ì–†–£–ó–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–• –î–ê–ù–ù–´–•")
    print("=" * 40)

    print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
    print("  ‚Ä¢ CSV —Ñ–∞–π–ª—ã (.csv)")
    print("  ‚Ä¢ JSON —Ñ–∞–π–ª—ã (.json)")
    print("  ‚Ä¢ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (.db, .sqlite)")
    print("  ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)")
    print("  ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏")

    source_type = input("\n–¢–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö (csv/json/sqlite/directory): ").strip().lower()
    file_path   = input("–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º: ").strip()
    collection  = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ ChromaDB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'documents'): ").strip() or "documents"
    clear_before = input("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π? (y/n): ").strip().lower() == 'y'

    path = Path(file_path)
    if not path.exists():
        print(f"‚ùå –§–∞–π–ª –∏–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {file_path}")
        return False

    # --- –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB ---
    client = chromadb.PersistentClient(path="generated/chroma_db")
    from gpu_embed_global import gpu_embedding
    emb_fn = gpu_embedding
    try:
        client.delete_collection(name=collection)
        print("‚ôªÔ∏è –°—Ç–∞—Ä–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ (–∏–∑-–∑–∞ —Å–º–µ–Ω—ã embedding-—Ñ—É–Ω–∫—Ü–∏–∏)")
    except Exception:
        pass
    coll = client.get_or_create_collection(name=collection, embedding_function=emb_fn)

    if clear_before:
        try:
            client.delete_collection(name=collection)
            coll = client.get_or_create_collection(name=collection, embedding_function=emb_fn)
            print("‚ôªÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
        except Exception:
            pass

    # --- —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ ---
    docs, meta = [], []
    try:
        if source_type == "csv":
            import chardet, io

            raw = path.read_bytes()  # —á–∏—Ç–∞–µ–º ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª
            enc = chardet.detect(raw)['encoding'] or 'utf-8'
            df = pd.read_csv(io.BytesIO(raw), encoding=enc, on_bad_lines='skip')
            for _, row in df.iterrows():
                docs.append(" ".join(f"{k}: {v}" for k, v in row.items()))
                meta.append({"source": "csv", **row.to_dict()})
        elif source_type == "json":
            data = pd.read_json(path)
            if isinstance(data, pd.DataFrame):
                for _, row in data.iterrows():
                    docs.append(" ".join(f"{k}: {v}" for k, v in row.items()))
                    meta.append({"source": "json", **row.to_dict()})
            else:
                docs.append(str(data))
                meta.append({"source": "json", "data": str(data)})
        elif source_type == "sqlite":
            import sqlite3
            conn = sqlite3.connect(path)
            tables = pd.read_sql_query("SELECT name FROM sqlite_master WHERE type='table';", conn)
            for tbl in tables["name"]:
                df = pd.read_sql_query(f"SELECT * FROM {tbl} LIMIT 1000;", conn)
                for _, row in df.iterrows():
                    docs.append(" ".join(f"{k}: {v}" for k, v in row.items()))
                    meta.append({"source": "sqlite", "table": tbl, **row.to_dict()})
            conn.close()
        elif source_type == "txt":
            text = path.read_text(encoding="utf-8")
            docs.append(text)
            meta.append({"source": "txt", "file": path.name})
        elif source_type == "directory":
            for txt_file in path.rglob("*.txt"):
                docs.append(txt_file.read_text(encoding="utf-8"))
                meta.append({"source": "directory", "file": str(txt_file)})
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

    # --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ ChromaDB ---
    if not docs:
        print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã ‚Äì —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
        return False

    ids = [str(uuid.uuid4()) for _ in docs]
    BATCH = 4_000  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    for i in range(0, len(docs), BATCH):
        coll.add(
            documents=docs[i:i + BATCH],
            metadatas=meta[i:i + BATCH],
            ids=ids[i:i + BATCH]
        )
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é '{collection}'")
    return True


def run_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö"""

    print(f"\nüîç –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
    print("=" * 20)

    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    try:
        from advanced_digital_twin_chroma import main as system_main
        asyncio.run(system_main())
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False


def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""

    help_text = """
üß† –ü–†–û–î–£–ö–¢–ò–í–ù–´–ô –¶–ò–§–†–û–í–û–ô –ê–ù–ê–õ–ò–¢–ò–ö - –°–ü–†–ê–í–ö–ê

–û–ü–ò–°–ê–ù–ò–ï:
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å ChromaDB, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º Reasoning –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

–û–°–ù–û–í–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
    ‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ ChromaDB (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    ‚Ä¢ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ Reasoning —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

–§–ê–ô–õ–´ –°–ò–°–¢–ï–ú–´:
    ‚Ä¢ advanced_digital_twin_chroma.py - –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    ‚Ä¢ load_user_data.py - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ test_system_chroma.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    ‚Ä¢ run_product.py - –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é '–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ'
    2. –ù–∞—á–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö'
    3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:
       python load_user_data.py --source csv --path data.csv --collection projects
       python advanced_digital_twin_chroma.py

–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´:
    ‚Ä¢ CSV —Ñ–∞–π–ª—ã (.csv)
    ‚Ä¢ JSON —Ñ–∞–π–ª—ã (.json)
    ‚Ä¢ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (.db, .sqlite)
    ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)
    ‚Ä¢ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å —Ñ–∞–π–ª–∞–º–∏

–°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–•:
    –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ ChromaDB –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö:
    ‚Ä¢ projects - –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
    ‚Ä¢ documents - –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –æ—Ç—á–µ—Ç—ã
    ‚Ä¢ analytics - –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    ‚Ä¢ risks - —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
    ‚Ä¢ resources - —Ä–µ—Å—É—Ä—Å—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª

–¢–ò–ü–´ –ó–ê–ü–†–û–°–û–í:
    ‚Ä¢ analytics - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ scenario - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ '—á—Ç–æ –µ—Å–ª–∏'
    ‚Ä¢ prediction - –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    ‚Ä¢ validation - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ explanation - –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:
    ‚Ä¢ '–ü–æ–∫–∞–∂–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º'
    ‚Ä¢ '–ß—Ç–æ –µ—Å–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ 30%?'
    ‚Ä¢ '–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö?'
    ‚Ä¢ '–°—Ä–∞–≤–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤'

–î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–û–í:
    ‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∞–≥–µ–Ω—Ç–∞–º–∏
    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
    ‚Ä¢ –†–∞—Å—à–∏—Ä—è–µ–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–ª–∞–≥–∏–Ω–æ–≤
    ‚Ä¢ API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–ü–û–î–î–ï–†–ñ–ö–ê:
    ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README2.md
    ‚Ä¢ –¢–µ—Å—Ç—ã: test_system_chroma.py
    ‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: load_user_data.py
    """

    print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""

    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–£–ö–¢–ê –¶–ò–§–†–û–í–û–ì–û –ê–ù–ê–õ–ò–¢–ò–ö–ê")
    print("=" * 50)

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫")
    parser.add_argument("--setup", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
    parser.add_argument("--load-data", action="store_true", help="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--analyze", action="store_true", help="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--help-product", action="store_true", help="–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É")
    parser.add_argument("--menu", action="store_true", help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")

    args = parser.parse_args()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.setup:
        # –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        setup_environment()

    elif args.test:
        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if setup_environment():
            run_product_test()

    elif args.load_data:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        load_user_data()

    elif args.analyze:
        # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
        run_analysis()

    elif args.help_product:
        # –°–ø—Ä–∞–≤–∫–∞
        show_help()

    elif args.menu:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        while True:
            choice = show_user_menu()

            if choice == "1":
                load_user_data()
            elif choice == "2":
                run_analysis()
            elif choice == "3":
                if setup_environment():
                    run_product_test()
            elif choice == "4":
                show_help()
            elif choice == "5":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        print("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∞...")

        if setup_environment():
            print(f"\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            load_data_choice = input(f"\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ? (y/n): ").strip().lower()
            if load_data_choice == 'y':
                load_user_data()

            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if run_product_test():
                print(f"\nüéâ –ü—Ä–æ–¥—É–∫—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

                # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
                analyze_choice = input(f"\n–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö? (y/n): ").strip().lower()
                if analyze_choice == 'y':
                    run_analysis()
            else:
                print(f"‚ùå –ü—Ä–æ–¥—É–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")


if __name__ == "__main__":
    main()