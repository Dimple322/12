#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å Reasoning.
"""

import streamlit as st
import asyncio
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path
from datetime import datetime
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.append(str(Path(__file__).parent))

from advanced_digital_twin_chroma import AdvancedDigitalTwin, QueryType, AnalysisResult

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit
st.set_page_config(
    page_title="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'digital_twin' not in st.session_state:
    st.session_state.digital_twin = AdvancedDigitalTwin()

if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []

if 'current_session' not in st.session_state:
    st.session_state.current_session = f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"

# CSS —Å—Ç–∏–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1e3a8a;
        margin-bottom: 2rem;
    }
    .reasoning-step {
        background-color: #f8fafc;
        border-left: 4px solid #3b82f6;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0.5rem;
    }
    .insight-card {
        background-color: #fef3c7;
        border: 1px solid #f59e0b;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0.5rem;
    }
    .recommendation-card {
        background-color: #d1fae5;
        border: 1px solid #10b981;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0.5rem;
    }
    .scenario-card {
        background-color: #e0e7ff;
        border: 1px solid #6366f1;
        padding: 1rem;
        margin: 0.5rem 0;
        border-radius: 0.5rem;
    }
    .confidence-high { color: #059669; }
    .confidence-medium { color: #d97706; }
    .confidence-low { color: #dc2626; }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.markdown('<h1 class="main-header">üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫</h1>', unsafe_allow_html=True)

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    query_type = st.selectbox(
        "–¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞",
        options=[
            "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "–°—Ü–µ–Ω–∞—Ä–∏–π '—á—Ç–æ –µ—Å–ª–∏'", 
            "–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            "–í–∞–ª–∏–¥–∞—Ü–∏—è",
            "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ"
        ],
        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    )
    
    # –°–µ—Å—Å–∏—è
    st.session_state.current_session = st.text_input(
        "ID —Å–µ—Å—Å–∏–∏",
        value=st.session_state.current_session,
        help="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ID –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏"
    )
    
    # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", type="secondary"):
        st.session_state.chat_history = []
        st.rerun()
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç JSON", type="secondary"):
        if st.session_state.chat_history:
            export_data = {
                "session_id": st.session_state.current_session,
                "timestamp": datetime.now().isoformat(),
                "queries": st.session_state.chat_history
            }
            st.download_button(
                label="üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                data=json.dumps(export_data, ensure_ascii=False, indent=2),
                file_name=f"analytics_results_{st.session_state.current_session}.json",
                mime="application/json"
            )

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
main_col1, main_col2 = st.columns([2, 1])

with main_col1:
    # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    st.header("üí¨ –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å")
    
    query_input = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–∫–æ–ª—å–∫–æ –¥–ª–∏–ª—Å—è –≤–∏–¥ —Ä–∞–±–æ—Ç 'X' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞?",
        height=100,
        help="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    submit_button = st.button("üöÄ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary", use_container_width=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
if submit_button and query_input:
    with st.spinner("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑..."):
        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            query_type_mapping = {
                "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞": QueryType.ANALYTICS,
                "–°—Ü–µ–Ω–∞—Ä–∏–π '—á—Ç–æ –µ—Å–ª–∏'": QueryType.SCENARIO,
                "–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞": QueryType.PREDICTION,
                "–í–∞–ª–∏–¥–∞—Ü–∏—è": QueryType.VALIDATION,
                "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ": QueryType.EXPLANATION
            }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            result = asyncio.run(st.session_state.digital_twin.process_query(
                query=query_input,
                session_id=st.session_state.current_session,
                query_type=query_type_mapping[query_type]
            ))
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.chat_history.append({
                "query": query_input,
                "type": query_type,
                "result": result,
                "timestamp": datetime.now().isoformat()
            })
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if st.session_state.chat_history:
    latest_result = st.session_state.chat_history[-1]["result"]
    
    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", "üß† –•–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π", "üí° –ò–Ω—Å–∞–π—Ç—ã", "üéØ –°—Ü–µ–Ω–∞—Ä–∏–∏", "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"
    ])
    
    with tab1:
        st.header("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("–ó–∞–ø–∏—Å–µ–π –Ω–∞–π–¥–µ–Ω–æ", len(latest_result.data))
        
        with col2:
            confidence_color = "high" if latest_result.confidence_score > 0.8 else "medium" if latest_result.confidence_score > 0.6 else "low"
            st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{latest_result.confidence_score:.2f}")
        
        with col3:
            validation_status = "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if latest_result.validation_results.get("is_valid") else "‚ùå –û—à–∏–±–∫–∏"
            st.metric("–í–∞–ª–∏–¥–∞—Ü–∏—è", validation_status)
        
        with col4:
            st.metric("–®–∞–≥–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π", len(latest_result.reasoning_steps))
        
        # –î–∞–Ω–Ω—ã–µ
        if latest_result.data:
            st.subheader("üìã –î–∞–Ω–Ω—ã–µ")
            df = pd.DataFrame(latest_result.data)
            st.dataframe(df, use_container_width=True)
            
            # SQL –∑–∞–ø—Ä–æ—Å
            with st.expander("üîç SQL –∑–∞–ø—Ä–æ—Å"):
                st.code(latest_result.sql_query, language="sql")
    
    with tab2:
        st.header("–•–æ–¥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π")
        
        for step in latest_result.reasoning_steps:
            with st.container():
                st.markdown(f'<div class="reasoning-step">', unsafe_allow_html=True)
                st.markdown(f"**–®–∞–≥ {step.step_number}: {step.description}**")
                st.write(f"ü§î –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {step.reasoning}")
                st.write(f"‚ö° –î–µ–π—Å—Ç–≤–∏–µ: {step.action}")
                st.write(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {step.expected_outcome}")
                
                if step.actual_outcome:
                    st.write(f"‚úÖ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {step.actual_outcome}")
                
                # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                confidence_color = "high" if step.confidence > 0.8 else "medium" if step.confidence > 0.6 else "low"
                st.markdown(f'<span class="confidence-{confidence_color}">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {step.confidence:.2f}</span>', 
                           unsafe_allow_html=True)
                
                if hasattr(step, 'validation_passed') and step.validation_passed:
                    st.success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
                
                st.markdown('</div>', unsafe_allow_html=True)
    
    with tab3:
        st.header("–ò–Ω—Å–∞–π—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        # –ò–Ω—Å–∞–π—Ç—ã
        if latest_result.insights:
            st.subheader("üí° –ò–Ω—Å–∞–π—Ç—ã")
            for insight in latest_result.insights:
                st.markdown(f'<div class="insight-card">{insight}</div>', unsafe_allow_html=True)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if latest_result.recommendations:
            st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
            for rec in latest_result.recommendations:
                st.markdown(f'<div class="recommendation-card">{rec}</div>', unsafe_allow_html=True)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if latest_result.validation_results.get("checks"):
            st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            for check in latest_result.validation_results["checks"]:
                status = "‚úÖ" if check["passed"] else "‚ùå"
                st.write(f"{status} **{check['check']}**: {check['details']}")
    
    with tab4:
        st.header("–°—Ü–µ–Ω–∞—Ä–∏–∏ '—á—Ç–æ –µ—Å–ª–∏'")
        
        if latest_result.scenario_analysis:
            # –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            if "baseline" in latest_result.scenario_analysis:
                baseline = latest_result.scenario_analysis["baseline"]
                st.subheader("üìä –ë–∞–∑–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
                st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {baseline['description']}")
                
                if baseline.get("metrics"):
                    st.write("**–ú–µ—Ç—Ä–∏–∫–∏:**")
                    for metric, values in baseline["metrics"].items():
                        if isinstance(values, dict):
                            col1, col2, col3, col4 = st.columns(4)
                            with col1:
                                st.metric(f"{metric} (—Å—Ä–µ–¥–Ω–µ–µ)", f"{values.get('mean', 0):.2f}")
                            with col2:
                                st.metric(f"{metric} (–º–µ–¥–∏–∞–Ω–∞)", f"{values.get('median', 0):.2f}")
                            with col3:
                                st.metric(f"{metric} (–º–∏–Ω)", f"{values.get('min', 0):.2f}")
                            with col4:
                                st.metric(f"{metric} (–º–∞–∫—Å)", f"{values.get('max', 0):.2f}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
            if "scenarios" in latest_result.scenario_analysis:
                st.subheader("üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
                
                for scenario in latest_result.scenario_analysis["scenarios"]:
                    with st.expander(f"**{scenario['name']}**"):
                        st.write(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {scenario['description']}")
                        
                        if "parameters" in scenario:
                            st.write("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                            for param, value in scenario["parameters"].items():
                                st.write(f"‚Ä¢ {param}: {value}")
                        
                        if "expected_outcomes" in scenario:
                            st.write("**–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                            for outcome, description in scenario["expected_outcomes"].items():
                                st.write(f"‚Ä¢ {outcome}: {description}")
                        
                        if "risks" in scenario:
                            st.write("**–†–∏—Å–∫–∏:**")
                            for risk in scenario["risks"]:
                                st.write(f"‚ö†Ô∏è {risk}")
                        
                        confidence = scenario.get("confidence", 0.5)
                        st.progress(confidence)
                        st.write(f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence:.0%}")
        else:
            st.info("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    with tab5:
        st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        if latest_result.data:
            df = pd.DataFrame(latest_result.data)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            numeric_columns = df.select_dtypes(include=['number']).columns
            categorical_columns = df.select_dtypes(include=['object']).columns
            
            if len(numeric_columns) >= 2:
                # Scatter plot –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                fig = px.scatter(
                    df, 
                    x=numeric_columns[0], 
                    y=numeric_columns[1],
                    title=f"–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ {numeric_columns[0]} –∏ {numeric_columns[1]}"
                )
                st.plotly_chart(fig, use_container_width=True)
            
            if len(categorical_columns) > 0:
                # Bar chart –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                for cat_col in categorical_columns[:2]:
                    value_counts = df[cat_col].value_counts()
                    fig = px.bar(
                        x=value_counts.index, 
                        y=value_counts.values,
                        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ {cat_col}"
                    )
                    st.plotly_chart(fig, use_container_width=True)
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if len(numeric_columns) > 0:
                for num_col in numeric_columns[:2]:
                    fig = px.histogram(
                        df, 
                        x=num_col,
                        title=f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {num_col}"
                    )
                    st.plotly_chart(fig, use_container_width=True)

# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
with main_col2:
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    for i, chat_item in enumerate(reversed(st.session_state.chat_history[-5:])):
        with st.container():
            st.markdown(f"**–ó–∞–ø—Ä–æ—Å {len(st.session_state.chat_history)-i}:**")
            st.write(f"üìù {chat_item['query'][:50]}...")
            st.write(f"üéØ {chat_item['type']}")
            st.write(f"‚è∞ {chat_item['timestamp'][:19]}")
            
            if st.button(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å {len(st.session_state.chat_history)-i}", key=f"restore_{i}"):
                st.session_state.restored_query = chat_item['query']
            
            st.markdown("---")

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
if hasattr(st.session_state, 'restored_query'):
    st.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {st.session_state.restored_query}")
    if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å"):
        query_input = st.session_state.restored_query
        del st.session_state.restored_query

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
with st.expander("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"):
    st.markdown("""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:
    
    1. **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞** - —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–∏—Å—Ç–µ–º–µ –≤—ã–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–Ω–∞–ª–∏–∑–∞
    2. **–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å** - —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –∑–∞–ø—Ä–æ—Å, —Ç–µ–º —Ç–æ—á–Ω–µ–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π ID —Å–µ—Å—Å–∏–∏** - –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    4. **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã** - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
    
    ### –ü—Ä–∏–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:
    - "–°–∫–æ–ª—å–∫–æ –¥–ª–∏–ª—Å—è –≤–∏–¥ —Ä–∞–±–æ—Ç 'X' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞?"
    - "–ß—Ç–æ –µ—Å–ª–∏ –±—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –±—ã–ª–æ –Ω–∞ 40% –±–æ–ª—å—à–µ, —Ç–æ –æ–±—ä–µ–∫—Ç –±—ã –ø–æ—Å—Ç—Ä–æ–∏–ª—Å—è –Ω–∞ Y –¥–Ω–µ–π –±—ã—Å—Ç—Ä–µ–µ?"
    - "–ö–∞–∫–æ–≤–∞ —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –≤ —Å—É—Ç–∫–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º?"
    - "–ö–∞–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞–∏–ª—É—á—à—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?"
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:
    - ‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ Reasoning —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    - ‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏
    - ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ "—á—Ç–æ –µ—Å–ª–∏"
    - ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    - ‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    - ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON
    """)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #6b7280; padding: 2rem;'>
    <p><strong>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫</strong></p>
    <p>–°–∏—Å—Ç–µ–º–∞ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º Reasoning, –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤</p>
</div>
""", unsafe_allow_html=True)