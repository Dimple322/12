#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã: –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import os
import sys
import subprocess
import asyncio
from pathlib import Path
import argparse
import logging

_product_test_suite = None

def _get_product_test_suite():
    global _product_test_suite
    if _product_test_suite is None:
        from test_system_chroma import ProductTestSuite
        _product_test_suite = ProductTestSuite
    return _product_test_suite

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def setup_environment():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –ù–ê–°–¢–†–û–ô–ö–ê –ü–†–û–î–í–ò–ù–£–¢–û–ô –°–ò–°–¢–ï–ú–´ –¶–ò–§–†–û–í–û–ì–û –ê–ù–ê–õ–ò–¢–ò–ö–ê")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = [
        "generated",
        "data/incoming",
        "data/processed",
        "logs",
        "exports"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print(f"\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        "streamlit",
        "pandas",
        "numpy",
        "sqlalchemy",
        "ollama",
        "plotly",
        "sklearn",
        "matplotlib",
        "seaborn"
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package}")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    print(f"\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ Ollama...")
    try:
        import ollama
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        try:
            ollama.chat(model="digital_twin_analyst", messages=[{"role": "user", "content": "test"}])
            print("‚úÖ Ollama –∏ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏: {e}")
            print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å 'digital_twin_analyst' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞")
            return False
    except ImportError:
        print("‚ùå Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    print(f"\n‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    return True

def generate_test_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print(f"\nüìä –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        from test_system_fixed import TestDataGenerator
        
        generator = TestDataGenerator(Path("generated/digital_twin_advanced.db"))
        success = generator.generate_construction_data()

        if success:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    
    print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    try:
        ProductTestSuite = _get_product_test_suite()
        ProductTestSuite = _get_product_test_suite()
        tester = ProductTestSuite()
        results = await tester.run_comprehensive_test()
        
        successful_tests = len([r for r in results if r.get("passed", False)])
        total_tests = len(results)
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {successful_tests}/{total_tests} ({successful_tests/total_tests*100:.1f}%)")
        
        if successful_tests >= total_tests * 0.7:  # 70% –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É")
            return True
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def run_interface(mode="web"):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–∏—Å—Ç–µ–º—ã"""
    
    print(f"\nüñ•Ô∏è  –ó–ê–ü–£–°–ö –ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("=" * 25)
    
    if mode == "web":
        print("–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit...")
        
        try:
            # –ó–∞–ø—É—Å–∫ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            cmd = [
                sys.executable, "-m", "streamlit", "run",
                "advanced_interface.py",
                "--server.port=8501",
                "--server.address=localhost",
                "--theme.base=dark"
            ]
            
            print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            subprocess.run(cmd)
            
        except KeyboardInterrupt:
            print(f"\nüõë –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
            
    elif mode == "cli":
        print("–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏...")
        
        try:
            from advanced_digital_twin_chroma import AdvancedDigitalTwin, QueryType
            
            digital_twin = AdvancedDigitalTwin()
            
            print("\nüí¨ –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
            print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
            print("  ‚Ä¢ –°–∫–æ–ª—å–∫–æ –¥–ª–∏–ª—Å—è –≤–∏–¥ —Ä–∞–±–æ—Ç 'X' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞?")
            print("  ‚Ä¢ –ß—Ç–æ –µ—Å–ª–∏ –±—ã —Ä–µ—Å—É—Ä—Å–æ–≤ –±—ã–ª–æ –Ω–∞ 40% –±–æ–ª—å—à–µ?")
            print("  ‚Ä¢ –ö–∞–∫–æ–≤–∞ —Å—Ä–µ–¥–Ω—è—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ –≤ —Å—É—Ç–∫–∏?")
            
            while True:
                try:
                    query = input("\nüìù –í–∞—à –∑–∞–ø—Ä–æ—Å: ").strip()
                    
                    if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    if not query:
                        continue
                    
                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                    query_type = QueryType.ANALYTICS
                    if "—á—Ç–æ –µ—Å–ª–∏" in query.lower() or "–µ—Å–ª–∏ –±—ã" in query.lower():
                        query_type = QueryType.SCENARIO
                    elif "–ø—Ä–µ–¥—Å–∫–∞–∂" in query.lower() or "–ø—Ä–æ–≥–Ω–æ–∑" in query.lower():
                        query_type = QueryType.PREDICTION
                    elif "–ø—Ä–æ–≤–µ—Ä" in query.lower() or "–≤–∞–ª–∏–¥–∞—Ü" in query.lower():
                        query_type = QueryType.VALIDATION
                    
                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                    result = asyncio.run(digital_twin.process_query(query, query_type=query_type))
                    
                    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
                    print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(result.data)}")
                    print(f"   –£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {result.confidence_score:.2f}")
                    
                    if result.insights:
                        print(f"\nüí° –ò–ù–°–ê–ô–¢–´:")
                        for insight in result.insights[:3]:
                            print(f"   ‚Ä¢ {insight}")
                    
                    if result.recommendations:
                        print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
                        for rec in result.recommendations[:2]:
                            print(f"   ‚Ä¢ {rec}")
                    
                    if result.scenario_analysis and result.scenario_analysis.get("scenarios"):
                        print(f"\nüîÑ –°–¶–ï–ù–ê–†–ò–ò:")
                        for scenario in result.scenario_analysis["scenarios"][:2]:
                            print(f"   ‚Ä¢ {scenario['name']}")
                
                except KeyboardInterrupt:
                    print(f"\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ CLI: {e}")

def show_help():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    
    help_text = """
üß† –ü–†–û–î–í–ò–ù–£–¢–´–ô –¶–ò–§–†–û–í–û–ô –ê–ù–ê–õ–ò–¢–ò–ö - –°–ü–†–ê–í–ö–ê

–û–ü–ò–°–ê–ù–ò–ï:
    –°–∏—Å—Ç–µ–º–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º Reasoning, –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.

–†–ï–ñ–ò–ú–´ –†–ê–ë–û–¢–´:
    --setup         –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    --test          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    --web           –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    --cli           –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    --full          –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, —Ç–µ—Å—Ç, –∑–∞–ø—É—Å–∫

–ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
    python run_system.py --setup
    python run_system.py --test
    python run_system.py --web
    python run_system.py --cli
    python run_system.py --full

–û–°–û–ë–ï–ù–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:
    ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ Reasoning —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ "—á—Ç–æ –µ—Å–ª–∏" —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–π
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    ‚Ä¢ Python 3.8+
    ‚Ä¢ Ollama —Å –º–æ–¥–µ–ª—å—é 'digital_twin_analyst'
    ‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt
    """
    
    print(help_text)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    # add_help=False –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ -h/--help
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫", add_help=False)
    parser.add_argument("--setup", action="store_true", help="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    parser.add_argument("--test", action="store_true", help="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--web", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    parser.add_argument("--cli", action="store_true", help="–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    parser.add_argument("--full", action="store_true", help="–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π --help
    parser.add_argument("--help", "-h", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")

    args = parser.parse_args()

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∫–∞ if args.help: –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    if args.help:
        show_help()
        return # –í–ê–ñ–ù–û: –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—è –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    if args.full:
        # –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª
        print("üîÑ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê")
        print("=" * 30)
        
        if not setup_environment():
            return
        
        if not generate_test_data():
            return
        
        if not asyncio.run(test_system()):
            return
        
        run_interface("web")
        
    elif args.setup:
        # –¢–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if setup_environment():
            generate_test_data()
    
    elif args.test:
        # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if setup_environment():
            asyncio.run(test_system())
    
    elif args.cli:
        # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        if setup_environment():
            run_interface("cli")
    
    elif args.web:
        # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if setup_environment():
            run_interface("web")
    
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        print("–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ–ø—Ü–∏–π")
        
        if setup_environment():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
            db_path = Path("generated/digital_twin_advanced.db")
            if not db_path.exists():
                print("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤—ã–µ...")
                generate_test_data()
            
            run_interface("web")

if __name__ == "__main__":
    main()